---
const { title, author, excerpt, image, date, categories, slug } = Astro.props;
import { Image } from "astro:assets";
---

<post-card
  class={`group/container basis-[32%] grow min-w-[250px] h-[375px] lg:h-[450px]`}
  style={{ perspective: "1200px" }}
  data-title={title}
  data-excerpt={excerpt}
  data-image={image}
  data-date={date}
  data-categories={categories}
  data-slug={slug}
>
  {/* Wrapper */}
  <div class="post-card-wrapper flex flex-col items-center cursor-pointer overflow-hidden h-full bg-black shadow-[0_0_1rem_4px_rgba(0,0,0,0.7)]">
    {/* Thumbnail */}
    <div class="overflow-hidden w-full">
      <Image
        class="w-full object-cover"
        title={image.title}
        src={image.sourceUrl}
        alt={image.altText}
        width="500"
        height="300"
      />
    </div>
    {/* Content */}
    <div class="grow p-[5%] pb-0">
      {/* Header */}
      <div class="flex flex-col mb-[1rem] gap-[0.4rem]">
        {/* Title */}
        <h5 class="text-yellow leading-none font-bebas text-3xl md:text-3xl xl:text-4xl">{title}</h5>
        {/* Categories */}
        <div class="flex gap-1">
          {/* Category */}
          {categories.map((category: string) => <span class="text-black bg-yellow text-base font-bebas uppercase rounded px-2">{category}</span>)}
        </div>
        {/* Date and author */}
        <div class="text-white font-open-sans">
          <span
            class="author text-base"
            style={{ fontVariant: "small-caps" }}
            >{author}</span
          >
           |
          <span class="date text-xs">{date}</span>
        </div>
      </div>
      {/* Excerpt */}
      <div
        set:html={excerpt}
        class={`grid grid-rows-[0fr] lg:group-hover/container:grid-rows-[1fr] text-white font-open-sans overflow-hidden transition-[ grid-template-rows] duration-500  lg:group-hover/container:*:mb-5 *:overflow-hidden`}
        >{excerpt}</div
      >
    </div>
    {/* Overlay */}
    <div class="overlay absolute h-full w-full opacity-0">
      <div class="absolute w-[200%] h-[200%] rounded-3xl left-[-50%] top-[-50%] bg-[radial-gradient(circle_at_50%,hsla(0,0%,100%,0.25),transparent_50%)]"></div>
    </div>
  </div>
</post-card>
<script>
  class PostCard extends HTMLElement {
    constructor() {
      super();

      const postCardWrapper = this.querySelector(".post-card-wrapper");
      const overlay = this.querySelector(".overlay");
      const image = this.querySelector("img");

      function handleMouseMove({ clientX, clientY }) {
        const rotationIntensity = 3;
        const overlayFactor = 2;
        const { left, top, width, height } = postCardWrapper.getBoundingClientRect();
        console.log(width, height);
        const [x, y] = [clientX - left, clientY - top];
        postCardWrapper.style.transitionDuration = "0ms";
        postCardWrapper.style.transform = `rotateX(${-(y / (height / 2) - 1) * rotationIntensity}deg)
        rotateY(${(x / (width / 2) - 1) * rotationIntensity}deg)`;
        postCardWrapper.style.transitionDuration = "0ms";
        image.style.transitionDuration = "0ms";
        image.style.transform = `scale(1.1)
        translateX(${((width - x) / width - 0.5) * 25}px)
        translateY(${((height - y) / height - 0.5) * 25}px)`;
        overlay.style.transitionDuration = "0ms";
        overlay.style.transform = `translate3d(${-((x * (100 / overlayFactor)) / width - 50 / overlayFactor)}%,
        ${-((y * (100 / overlayFactor)) / height - 50 / overlayFactor)}%,
        0)`;
        overlay.style.opacity = Math.abs(width / 2 - x) / width + Math.abs(height / 2 - y) / height;
        console.log(Math.abs(width / 2 - x) / width + Math.abs(height / 2 - y) / height);
      }

      function handleMouseOut() {
        postCardWrapper.style.transitionDuration = "500ms";
        postCardWrapper.style.transform = `rotateX(0deg) rotateY(0deg)`;
        image.style.transitionDuration = "500ms";
        image.style.transform = `scale(1)
                                              translateX(0px)
                                              translateY(0px)`;
        overlay.style.transitionDuration = "500ms";
        overlay.style.opacity = "0";
        overlay.style.transform = `translate3d(0%, 0%, 0);`;
      }

      if (document.body.clientWidth > 768) {
        postCardWrapper?.addEventListener("mousemove", handleMouseMove);
        postCardWrapper?.addEventListener("mouseout", handleMouseOut);
      }
    }
  }

  customElements.define("post-card", PostCard);
</script>
